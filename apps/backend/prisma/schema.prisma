// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model aligned with existing auth schemas
model User {
  id        String     @id @default(uuid())
  email     String     @unique
  username  String     @unique
  firstName String     @map("first_name")
  lastName  String     @map("last_name")
  role      UserRole   @default(USER)
  status    UserStatus @default(ACTIVE)

  // Password and security
  passwordHash String @map("password_hash")

  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  lastLoginAt DateTime? @map("last_login_at")

  // Relationships
  createdTasks  Task[]        @relation("TaskCreator")
  assignedTasks Task[]        @relation("TaskAssignee")
  claudeTasks   ClaudeTask[]  @relation("ClaudeTaskCreator")
  sessions      UserSession[]

  @@map("users")
}

// User role enumeration matching auth schemas
enum UserRole {
  ADMIN
  USER
  MODERATOR

  @@map("user_role")
}

// User status enumeration matching auth schemas
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION

  @@map("user_status")
}

// Task model aligned with existing task schemas
model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)

  // Relationships
  createdById String @map("created_by_id")
  createdBy   User   @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)

  assigneeId String? @map("assignee_id")
  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  projectId String?  @map("project_id")
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  // Metadata
  tags        String[]
  dueDate     DateTime? @map("due_date")
  completedAt DateTime? @map("completed_at")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([status])
  @@index([priority])
  @@index([createdById])
  @@index([assigneeId])
  @@index([projectId])
  @@map("tasks")
}

// Task status enumeration
enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED

  @@map("task_status")
}

// Task priority enumeration
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@map("task_priority")
}

// Project model for task organization
model Project {
  id          String  @id @default(uuid())
  name        String
  description String?

  // Relationships
  tasks       Task[]
  claudeTasks ClaudeTask[]

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

// User session model for authentication
model UserSession {
  id     String @id @default(uuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Session data
  deviceInfo String? @map("device_info")
  ipAddress  String? @map("ip_address")
  userAgent  String? @map("user_agent")
  isActive   Boolean @default(true) @map("is_active")

  // Timestamps
  createdAt      DateTime @default(now()) @map("created_at")
  expiresAt      DateTime @map("expires_at")
  lastActivityAt DateTime @default(now()) @map("last_activity_at")

  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("user_sessions")
}

// =============================================================================
// CLAUDE CODE ENTITIES - Enhanced task management for AI operations
// =============================================================================

// Claude Code AI task model for intelligent task execution
model ClaudeTask {
  id          String           @id @default(uuid())
  title       String
  description String?
  prompt      String // Claude Code prompt/command
  config      Json? // Task configuration (timeout, retry, etc.)
  status      ClaudeTaskStatus @default(PENDING)
  priority    TaskPriority     @default(MEDIUM)

  // Relationships
  createdById String   @map("created_by_id")
  createdBy   User     @relation("ClaudeTaskCreator", fields: [createdById], references: [id], onDelete: Cascade)
  projectId   String?  @map("project_id")
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  // Execution tracking
  executions TaskExecution[]
  queueJobs  QueueJob[]
  results    TaskResult[]

  // Metadata
  tags              String[]
  estimatedDuration Int?     @map("estimated_duration") // seconds
  actualDuration    Int?     @map("actual_duration") // seconds

  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  scheduledAt DateTime? @map("scheduled_at")
  startedAt   DateTime? @map("started_at")
  completedAt DateTime? @map("completed_at")

  @@index([status])
  @@index([priority])
  @@index([createdById])
  @@index([scheduledAt])
  @@index([startedAt])
  @@map("claude_tasks")
}

// Task execution tracking for individual execution attempts
model TaskExecution {
  id     String     @id @default(uuid())
  taskId String     @map("task_id")
  task   ClaudeTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // Execution metadata
  status    ExecutionStatus @default(INITIALIZING)
  progress  Float?          @default(0.0) // 0.0 to 1.0
  workerId  String?         @map("worker_id")
  processId String?         @map("process_id")
  sessionId String?         @map("session_id") // Claude Code session

  // Resource tracking
  cpuUsage    Float? @map("cpu_usage")
  memoryUsage Int?   @map("memory_usage") // bytes
  diskUsage   Int?   @map("disk_usage") // bytes

  // Error handling
  errorMessage String? @map("error_message")
  errorCode    String? @map("error_code")
  stackTrace   String? @map("stack_trace")
  retryCount   Int     @default(0) @map("retry_count")

  // Relationships
  logs    ExecutionLog[]
  metrics SystemMetric[]

  // Timestamps
  createdAt     DateTime  @default(now()) @map("created_at")
  startedAt     DateTime? @map("started_at")
  completedAt   DateTime? @map("completed_at")
  lastHeartbeat DateTime? @map("last_heartbeat")

  @@index([taskId])
  @@index([status])
  @@index([workerId])
  @@index([startedAt])
  @@index([lastHeartbeat])
  @@map("task_executions")
}

// Queue job management for BullMQ persistence
model QueueJob {
  id     String     @id @default(uuid())
  taskId String     @map("task_id")
  task   ClaudeTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // Queue metadata
  queueName String         @map("queue_name")
  jobId     String         @unique @map("job_id") // BullMQ job ID
  status    QueueJobStatus @default(WAITING)
  priority  Int            @default(0)
  delay     Int?           @default(0) // milliseconds

  // Processing
  attempts     JobAttempt[]
  maxAttempts  Int          @default(3) @map("max_attempts")
  backoffType  BackoffType  @default(EXPONENTIAL) @map("backoff_type")
  backoffDelay Int          @default(2000) @map("backoff_delay") // milliseconds

  // Data
  jobData    Json  @map("job_data")
  jobOptions Json? @map("job_options")
  result     Json?

  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  processedAt DateTime? @map("processed_at")
  finishedAt  DateTime? @map("finished_at")

  @@index([queueName])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([jobId])
  @@map("queue_jobs")
}

// Job attempt tracking for retry mechanisms
model JobAttempt {
  id         String   @id @default(uuid())
  queueJobId String   @map("queue_job_id")
  queueJob   QueueJob @relation(fields: [queueJobId], references: [id], onDelete: Cascade)

  // Attempt metadata
  attemptNumber Int           @map("attempt_number")
  status        AttemptStatus @default(PROCESSING)
  error         String?
  result        Json?

  // Timestamps
  startedAt  DateTime  @map("started_at")
  finishedAt DateTime? @map("finished_at")

  @@index([queueJobId])
  @@index([attemptNumber])
  @@index([status])
  @@index([startedAt])
  @@map("job_attempts")
}

// Execution log storage for Claude Code STDIO output
model ExecutionLog {
  id          String        @id @default(uuid())
  executionId String        @map("execution_id")
  execution   TaskExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  // Log metadata
  level   LogLevel  @default(INFO)
  source  LogSource @default(SYSTEM)
  message String
  details Json? // Structured log data

  // Context
  component     String? // Which component generated the log
  operation     String? // What operation was being performed
  correlationId String? @map("correlation_id")

  // Timestamps
  timestamp DateTime @default(now())

  @@index([executionId])
  @@index([level])
  @@index([source])
  @@index([timestamp])
  @@index([correlationId])
  @@map("execution_logs")
}

// System metrics for performance monitoring
model SystemMetric {
  id          String         @id @default(uuid())
  executionId String?        @map("execution_id")
  execution   TaskExecution? @relation(fields: [executionId], references: [id], onDelete: Cascade)

  // Metric metadata
  metricType MetricType @map("metric_type")
  metricName String     @map("metric_name")
  value      Float
  unit       String?

  // Context
  workerId  String? @map("worker_id")
  queueName String? @map("queue_name")
  tags      Json? // Additional metric tags

  // Timestamps
  timestamp DateTime @default(now())

  @@index([metricType])
  @@index([metricName])
  @@index([timestamp])
  @@index([workerId])
  @@index([executionId])
  @@map("system_metrics")
}

// Task result storage for execution outcomes
model TaskResult {
  id     String     @id @default(uuid())
  taskId String     @map("task_id")
  task   ClaudeTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // Result metadata
  status  ResultStatus @default(SUCCESS)
  summary String?
  output  Json? // Structured output data

  // File attachments
  files ResultFile[]

  // Quality metrics
  executionTime Int?   @map("execution_time") // milliseconds
  tokensUsed    Int?   @map("tokens_used")
  costEstimate  Float? @map("cost_estimate")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  @@index([taskId])
  @@index([status])
  @@index([createdAt])
  @@map("task_results")
}

// Result file attachments for task outputs
model ResultFile {
  id       String     @id @default(uuid())
  resultId String     @map("result_id")
  result   TaskResult @relation(fields: [resultId], references: [id], onDelete: Cascade)

  // File metadata
  filename    String
  contentType String @map("content_type")
  size        Int // bytes
  path        String // Storage path or URL
  checksum    String // File integrity verification

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  @@index([resultId])
  @@index([filename])
  @@index([contentType])
  @@map("result_files")
}

// =============================================================================
// CLAUDE CODE ENUMERATIONS - Status and type definitions
// =============================================================================

// Claude task status enumeration
enum ClaudeTaskStatus {
  PENDING
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  PAUSED

  @@map("claude_task_status")
}

// Task execution status enumeration
enum ExecutionStatus {
  INITIALIZING
  STARTING
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT

  @@map("execution_status")
}

// Queue job status enumeration
enum QueueJobStatus {
  WAITING
  ACTIVE
  COMPLETED
  FAILED
  DELAYED
  PAUSED
  STUCK

  @@map("queue_job_status")
}

// Job attempt status enumeration
enum AttemptStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED

  @@map("attempt_status")
}

// Backoff strategy enumeration
enum BackoffType {
  FIXED
  EXPONENTIAL
  LINEAR

  @@map("backoff_type")
}

// Log level enumeration
enum LogLevel {
  TRACE
  DEBUG
  INFO
  WARN
  ERROR
  FATAL

  @@map("log_level")
}

// Log source enumeration
enum LogSource {
  SYSTEM
  CLAUDE
  USER
  QUEUE
  WORKER
  DATABASE

  @@map("log_source")
}

// Metric type enumeration
enum MetricType {
  COUNTER
  GAUGE
  HISTOGRAM
  SUMMARY
  TIMER

  @@map("metric_type")
}

// Result status enumeration
enum ResultStatus {
  SUCCESS
  PARTIAL_SUCCESS
  FAILURE
  ERROR
  TIMEOUT

  @@map("result_status")
}
