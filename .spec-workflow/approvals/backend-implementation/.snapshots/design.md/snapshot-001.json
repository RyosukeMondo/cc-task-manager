{
  "id": "snapshot_1758967194336_bvql92rs6",
  "approvalId": "approval_1758967194328_z2vfp42kz",
  "approvalTitle": "Contract-driven backend design with SOLID principles, Zod, OpenAPI, and Swagger",
  "version": 1,
  "timestamp": "2025-09-27T09:59:54.336Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nThis design document outlines the architecture for implementing a production-ready NestJS backend application that serves as the API gateway and orchestration layer for the Claude Code Task Manager. The backend implements a contract-driven development approach where Zod schemas serve as the single source of truth (SSOT) for API contracts, automatic OpenAPI/Swagger documentation generation, and type-safe client generation. The architecture follows SOLID principles, SLAP (Single Level of Abstraction Principle), and KISS (Keep It Simple, Stupid) principles while leveraging industry-standard libraries for reliability, observability, and maintainability.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n\nThe design follows documented technical patterns:\n- **NestJS 10+ Framework**: Structured TypeScript framework with dependency injection and modular architecture\n- **Contract-Driven Development**: Zod schemas as single source of truth for validation, types, and OpenAPI generation\n- **Type Safety**: TypeScript 5.0+ with strict mode for maximum type safety across all layers\n- **High-Performance Logging**: Pino for structured JSON logging optimized for production observability\n- **Real-time Communication**: Socket.IO via NestJS Gateway for WebSocket-based live updates\n- **Enterprise Authentication**: Passport.js + JWT with CASL for attribute-based access control (ABAC)\n\n### Project Structure (structure.md)\n\nImplementation follows project organization conventions:\n- **Backend Application**: Located at `apps/backend/` as independent NestJS application\n- **Shared Packages**: Leverages `@cc-task-manager/types`, `@cc-task-manager/schemas`, `@cc-task-manager/utils`\n- **Module Organization**: Feature-based modules (auth, tasks, users, queue, websocket) with clear boundaries\n- **Configuration Management**: Centralized configuration following established patterns\n- **Import Conventions**: Absolute imports from `src/`, workspace packages, and proper dependency hierarchy\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n- **Configuration Patterns**: Reuse existing `ConfigModule` setup and environment variable management\n- **Database Schema**: Extend existing Prisma schema with backend-specific models and relationships\n- **Shared Types**: Utilize `@cc-task-manager/types` for common data structures and interfaces\n- **Validation Schemas**: Build upon `@cc-task-manager/schemas` for request/response validation\n- **Utility Functions**: Leverage `@cc-task-manager/utils` for common operations and helpers\n\n### Integration Points\n- **Worker Application**: Communication through BullMQ job queue and shared database\n- **Database**: PostgreSQL access through shared Prisma client and schema\n- **Queue System**: BullMQ integration for job management and worker coordination\n- **Configuration**: Shared environment configuration and secrets management\n- **Contract System**: Integration with contract registry for API specification and testing\n\n## Architecture\n\nThe backend implements a layered, modular architecture following domain-driven design principles with contract-driven development as the foundation.\n\n### Contract-Driven Development Foundation\n\n```mermaid\ngraph TD\n    A[Zod Schemas] --> B[Contract Registry]\n    B --> C[OpenAPI Generation]\n    B --> D[TypeScript Generation]\n    B --> E[Validation Pipes]\n    B --> F[API Documentation]\n\n    G[NestJS Controllers] --> H[nestjs-zod Integration]\n    H --> A\n\n    I[Frontend Client] --> J[Generated Types]\n    J --> D\n\n    K[Contract Testing] --> L[Pact Framework]\n    L --> B\n```\n\n### SOLID Principles Implementation\n\n- **Single Responsibility Principle (SRP)**: Each module, service, and controller handles one specific domain concern\n- **Open/Closed Principle**: Extensibility through dependency injection, strategy patterns, and plugin architecture\n- **Liskov Substitution Principle**: Interface-based design ensuring all implementations are fully substitutable\n- **Interface Segregation Principle**: Specific interfaces for each client need, avoiding forced dependencies\n- **Dependency Inversion Principle**: High-level modules depend on abstractions through NestJS dependency injection\n\n### Modular Design Principles\n- **Single File Responsibility**: Each file handles one specific concern (controller, service, repository, etc.)\n- **Component Isolation**: Services are isolated with clear interfaces and minimal coupling\n- **Service Layer Separation**: Clear separation between controllers, services, repositories, and data access\n- **Utility Modularity**: Focused, single-purpose utility modules and helper functions\n\n```mermaid\ngraph TD\n    A[HTTP Layer] --> B[Controllers]\n    B --> C[Guards & Middlewares]\n    C --> D[Validation Pipes]\n    D --> E[Service Layer]\n    E --> F[Repository Layer]\n    F --> G[Database/External APIs]\n\n    H[WebSocket Gateway] --> I[Event Handlers]\n    I --> E\n\n    J[Job Processors] --> K[Queue Service]\n    K --> E\n\n    L[Contract Registry] --> M[Zod Schemas]\n    M --> N[OpenAPI Generation]\n    M --> O[Type Generation]\n```\n\n## Components and Interfaces\n\n### Authentication Module (`apps/backend/src/auth/`)\n\n- **Purpose:** JWT-based authentication with Passport.js integration and CASL authorization\n- **Interfaces:**\n  - `POST /auth/login` - User authentication\n  - `POST /auth/refresh` - Token refresh\n  - `GET /auth/profile` - User profile retrieval\n- **Dependencies:** Passport.js, JWT, CASL, User service\n- **Reuses:** Shared user types, validation schemas, configuration patterns\n- **SOLID Implementation:**\n  - SRP: Separate strategies for local/JWT authentication\n  - OCP: Extensible through new Passport strategies\n  - DIP: Depends on user service abstraction\n\n### Task Management Module (`apps/backend/src/tasks/`)\n\n- **Purpose:** CRUD operations for Claude Code tasks with queue integration\n- **Interfaces:**\n  - `POST /tasks` - Create new task (Zod validated)\n  - `GET /tasks` - List tasks with pagination/filtering\n  - `GET /tasks/:id` - Retrieve specific task\n  - `PUT /tasks/:id` - Update task status\n  - `DELETE /tasks/:id` - Cancel/delete task\n- **Dependencies:** Task repository, Queue service, WebSocket gateway\n- **Reuses:** Task schemas from `@cc-task-manager/schemas`, shared utilities\n- **Contract-Driven:** All endpoints use Zod schemas for validation and OpenAPI generation\n\n### WebSocket Gateway (`apps/backend/src/websocket/`)\n\n- **Purpose:** Real-time task status updates and system notifications\n- **Interfaces:**\n  - Connection authentication via JWT\n  - Room-based user targeting\n  - Task progress broadcasting\n  - System status updates\n- **Dependencies:** Socket.IO, Authentication guard, Task service\n- **Reuses:** Event schemas, authentication patterns, user management\n- **SOLID Implementation:**\n  - SRP: Separate handlers for different event types\n  - ISP: Client-specific event interfaces\n\n### Queue Management Module (`apps/backend/src/queue/`)\n\n- **Purpose:** BullMQ integration for job scheduling and worker coordination\n- **Interfaces:**\n  - Job creation and enqueueing\n  - Queue monitoring and health checks\n  - Job status tracking and updates\n  - Failed job retry management\n- **Dependencies:** BullMQ, Redis, Event emitter\n- **Reuses:** Job schemas, configuration management, logging utilities\n- **Integration:** Direct communication with worker application via Redis\n\n### User Management Module (`apps/backend/src/users/`)\n\n- **Purpose:** User CRUD operations and profile management\n- **Interfaces:**\n  - `GET /users/profile` - Current user profile\n  - `PUT /users/profile` - Update user profile\n  - `GET /users/tasks` - User's task history\n- **Dependencies:** User repository, Authentication service\n- **Reuses:** User schemas, validation patterns, database utilities\n- **Authorization:** CASL-based attribute access control\n\n### Configuration Module (`apps/backend/src/config/`)\n\n- **Purpose:** Centralized configuration management with validation\n- **Interfaces:**\n  - Environment variable loading\n  - Configuration validation with Zod\n  - Type-safe configuration access\n- **Dependencies:** `@nestjs/config`, Zod validation schemas\n- **Reuses:** Shared configuration patterns, environment setup\n- **SSOT Implementation:** Single configuration schema used across modules\n\n## Data Models\n\n### API Request/Response Schemas (Zod-based)\n\n```typescript\n// Task Creation Contract\nconst CreateTaskSchema = z.object({\n  name: z.string().min(1).max(255),\n  description: z.string().optional(),\n  command: z.string().min(1),\n  arguments: z.record(z.unknown()).optional(),\n  workingDirectory: z.string().optional(),\n  timeout: z.number().int().positive().optional(),\n});\n\n// Task Response Contract\nconst TaskResponseSchema = z.object({\n  id: z.string().uuid(),\n  name: z.string(),\n  status: z.enum(['pending', 'running', 'completed', 'failed', 'cancelled']),\n  progress: z.number().min(0).max(100),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  result: z.unknown().optional(),\n  error: z.string().optional(),\n});\n\n// OpenAPI generation through nestjs-zod\nexport const CreateTaskDto = createZodDto(CreateTaskSchema);\nexport const TaskResponseDto = createZodDto(TaskResponseSchema);\n```\n\n### Database Models (Prisma)\n\n```prisma\nmodel User {\n  id        String   @id @default(uuid())\n  email     String   @unique\n  password  String\n  name      String?\n  role      UserRole @default(USER)\n  tasks     Task[]\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Task {\n  id              String     @id @default(uuid())\n  name            String\n  description     String?\n  command         String\n  arguments       Json?\n  workingDirectory String?\n  status          TaskStatus @default(PENDING)\n  progress        Int        @default(0)\n  result          Json?\n  error           String?\n  logs            String[]\n  userId          String\n  user            User       @relation(fields: [userId], references: [id])\n  createdAt       DateTime   @default(now())\n  updatedAt       DateTime   @updatedAt\n}\n```\n\n### WebSocket Event Schemas\n\n```typescript\nconst TaskStatusUpdateSchema = z.object({\n  taskId: z.string().uuid(),\n  status: z.enum(['pending', 'running', 'completed', 'failed', 'cancelled']),\n  progress: z.number().min(0).max(100),\n  timestamp: z.date(),\n  message: z.string().optional(),\n});\n\nconst SystemNotificationSchema = z.object({\n  type: z.enum(['info', 'warning', 'error']),\n  message: z.string(),\n  timestamp: z.date(),\n  metadata: z.record(z.unknown()).optional(),\n});\n```\n\n## Error Handling\n\n### Contract-Driven Error Responses\n\n```typescript\nconst ErrorResponseSchema = z.object({\n  statusCode: z.number(),\n  message: z.string(),\n  error: z.string(),\n  timestamp: z.string(),\n  path: z.string(),\n  details: z.array(z.object({\n    field: z.string(),\n    message: z.string(),\n  })).optional(),\n});\n```\n\n### Error Scenarios\n\n1. **Validation Errors**\n   - **Handling:** Zod validation pipes catch and format validation errors automatically\n   - **User Impact:** Clear field-level error messages with HTTP 400 Bad Request\n\n2. **Authentication Failures**\n   - **Handling:** JWT Guard returns structured error with expiration details\n   - **User Impact:** HTTP 401 Unauthorized with token refresh guidance\n\n3. **Authorization Failures**\n   - **Handling:** CASL Guard provides detailed permission error context\n   - **User Impact:** HTTP 403 Forbidden with specific permission requirements\n\n4. **Queue Service Errors**\n   - **Handling:** Circuit breaker pattern with fallback mechanisms\n   - **User Impact:** HTTP 503 Service Unavailable with retry guidance\n\n5. **Database Connection Errors**\n   - **Handling:** Connection retry logic with exponential backoff\n   - **User Impact:** HTTP 500 Internal Server Error with correlation ID for tracking\n\n### Global Exception Filter\n\n```typescript\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    // Structured error logging with Pino\n    // Contract-based error response formatting\n    // Correlation ID tracking\n    // Security-safe error messages\n  }\n}\n```\n\n## OpenAPI/Swagger Integration\n\n### Automated Documentation Generation\n\n```typescript\n// main.ts setup\nimport { patchNestjsSwagger } from '@wahyubucil/nestjs-zod-openapi';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  // Patch Swagger to understand Zod schemas\n  patchNestjsSwagger();\n\n  const config = new DocumentBuilder()\n    .setTitle('Claude Code Task Manager API')\n    .setDescription('Contract-driven API for AI task management')\n    .setVersion('1.0')\n    .addBearerAuth()\n    .build();\n\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, document);\n}\n```\n\n### Controller Implementation\n\n```typescript\n@Controller('tasks')\n@ApiTags('Tasks')\nexport class TaskController {\n  @Post()\n  @ApiOperation({ summary: 'Create a new task' })\n  @ApiCreatedResponse({ type: TaskResponseDto })\n  @ApiBadRequestResponse({ type: ErrorResponseDto })\n  async createTask(\n    @Body() createTaskDto: CreateTaskDto,\n    @GetUser() user: User,\n  ): Promise<TaskResponseDto> {\n    // Implementation with automatic validation\n    // OpenAPI documentation generated from Zod schemas\n  }\n}\n```\n\n## Testing Strategy\n\n### Contract Testing with Pact\n\n```typescript\n// Consumer-driven contract testing\ndescribe('Claude Code SDK Integration', () => {\n  beforeEach(() => {\n    mockProvider\n      .given('task execution request')\n      .uponReceiving('a valid task execution')\n      .withRequest({\n        method: 'POST',\n        path: '/execute',\n        body: like(CreateTaskSchema),\n      })\n      .willRespondWith({\n        status: 200,\n        body: like(TaskResponseSchema),\n      });\n  });\n});\n```\n\n### Unit Testing\n\n- **Schema Validation Testing**: Comprehensive Zod schema validation test coverage\n- **Service Layer Testing**: Mock-based testing with dependency injection\n- **Controller Testing**: Request/response testing with contract validation\n- **Guard Testing**: Authentication and authorization logic verification\n\n### Integration Testing\n\n- **API Contract Testing**: End-to-end API contract validation\n- **Database Integration**: Repository pattern testing with test database\n- **Queue Integration**: BullMQ job processing and event handling\n- **WebSocket Testing**: Real-time communication flow validation\n\n### End-to-End Testing\n\n- **User Authentication Flow**: Complete login/logout/refresh cycle\n- **Task Management Workflow**: Create, monitor, update, and complete tasks\n- **Real-time Updates**: WebSocket event delivery verification\n- **Error Handling**: Comprehensive error scenario coverage",
  "fileStats": {
    "size": 14694,
    "lines": 406,
    "lastModified": "2025-09-27T09:59:48.273Z"
  },
  "comments": []
}