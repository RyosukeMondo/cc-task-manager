{
  "id": "snapshot_1758807736761_eu3zra5bw",
  "approvalId": "approval_1758806213220_nvj7jr1g6",
  "approvalTitle": "Project Structure - Claude Code Task Manager",
  "version": 2,
  "timestamp": "2025-09-25T13:42:16.761Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Project Structure\n\n## Directory Organization\n\n```\ncc-task-manager/                    # Project root\n├── .spec-workflow/                 # Specification workflow management\n│   ├── steering/                   # Project steering documents\n│   │   ├── product.md             # Product vision and objectives\n│   │   ├── tech.md                # Technology stack decisions\n│   │   └── structure.md           # This document\n│   ├── specs/                     # Feature specifications\n│   │   └── [feature-name]/        # Individual feature specs\n│   │       ├── requirements.md    # Feature requirements\n│   │       ├── design.md          # Technical design\n│   │       └── tasks.md           # Implementation tasks\n│   └── templates/                 # Spec templates\n├── apps/                          # Application packages\n│   ├── frontend/                  # Next.js frontend application\n│   │   ├── src/\n│   │   │   ├── app/              # Next.js App Router pages\n│   │   │   ├── components/       # Reusable UI components\n│   │   │   │   ├── ui/           # Shadcn/ui components\n│   │   │   │   └── features/     # Feature-specific components\n│   │   │   ├── lib/              # Shared utilities and config\n│   │   │   ├── hooks/            # Custom React hooks\n│   │   │   ├── stores/           # Zustand state stores\n│   │   │   └── types/            # TypeScript type definitions\n│   │   ├── public/               # Static assets\n│   │   └── package.json\n│   ├── backend/                   # NestJS backend application\n│   │   ├── src/\n│   │   │   ├── auth/             # Authentication module\n│   │   │   ├── tasks/            # Task management module\n│   │   │   ├── users/            # User management module\n│   │   │   ├── queue/            # Job queue management\n│   │   │   ├── websocket/        # Real-time communication\n│   │   │   ├── common/           # Shared decorators, filters, guards\n│   │   │   │   ├── decorators/   # Custom decorators\n│   │   │   │   ├── guards/       # Authorization guards\n│   │   │   │   ├── filters/      # Exception filters\n│   │   │   │   └── pipes/        # Validation pipes\n│   │   │   ├── config/           # Configuration management\n│   │   │   ├── database/         # Database configuration and migrations\n│   │   │   └── main.ts          # Application entry point\n│   │   └── package.json\n│   └── worker/                    # Background task processing\n│       ├── src/\n│       │   ├── processors/       # BullMQ job processors\n│       │   ├── claude-code/      # Claude Code integration\n│       │   │   ├── wrapper.py    # Python SDK wrapper\n│       │   │   └── executor.ts   # Node.js executor\n│       │   ├── monitoring/       # Process monitoring utilities\n│       │   └── main.ts          # Worker entry point\n│       └── package.json\n├── packages/                      # Shared packages\n│   ├── types/                     # Shared TypeScript types\n│   │   ├── src/\n│   │   │   ├── api/              # API contract types\n│   │   │   ├── database/         # Database entity types\n│   │   │   └── common/           # Common utility types\n│   │   └── package.json\n│   ├── schemas/                   # Zod validation schemas\n│   │   ├── src/\n│   │   │   ├── auth/             # Authentication schemas\n│   │   │   ├── tasks/            # Task-related schemas\n│   │   │   └── users/            # User-related schemas\n│   │   └── package.json\n│   └── utils/                     # Shared utilities\n│       ├── src/\n│       │   ├── date/             # Date manipulation utilities\n│       │   ├── validation/       # Validation helpers\n│       │   └── constants/        # Shared constants\n│       └── package.json\n├── scripts/                       # Build and deployment scripts\n│   ├── build.sh                  # Production build script\n│   ├── dev.sh                    # Development startup script\n│   ├── deploy.sh                 # Deployment automation\n│   └── migrate.sh               # Database migration script\n├── docker/                       # Docker configuration\n│   ├── Dockerfile.frontend       # Frontend container\n│   ├── Dockerfile.backend        # Backend container\n│   ├── Dockerfile.worker         # Worker container\n│   └── docker-compose.yml       # Development orchestration\n├── docs/                         # Project documentation\n│   └── [research-files]          # Technical research documents\n├── .github/                      # GitHub configuration\n│   └── workflows/               # CI/CD pipelines\n├── prisma/                       # Database schema and migrations\n│   ├── schema.prisma            # Database schema definition\n│   ├── migrations/              # Database migration files\n│   └── seed.ts                  # Database seeding script\n└── package.json                 # Root package.json (workspace config)\n```\n\n## Naming Conventions\n\n### Files\n- **Components**: `PascalCase` (e.g., `TaskCard.tsx`, `UserProfile.tsx`)\n- **Services/Handlers**: `PascalCase` with suffix (e.g., `TaskService.ts`, `AuthGuard.ts`)\n- **Utilities/Helpers**: `camelCase` (e.g., `dateUtils.ts`, `apiClient.ts`)\n- **Tests**: `[filename].test.ts` or `[filename].spec.ts` (e.g., `TaskService.test.ts`)\n- **Types**: `[name].types.ts` (e.g., `task.types.ts`, `api.types.ts`)\n- **Schemas**: `[name].schema.ts` (e.g., `task.schema.ts`, `user.schema.ts`)\n\n### Code\n- **Classes/Types**: `PascalCase` (e.g., `TaskService`, `UserEntity`, `CreateTaskDto`)\n- **Functions/Methods**: `camelCase` (e.g., `createTask`, `getUserById`, `validateInput`)\n- **Constants**: `UPPER_SNAKE_CASE` (e.g., `MAX_RETRY_ATTEMPTS`, `DEFAULT_TIMEOUT`)\n- **Variables**: `camelCase` (e.g., `taskId`, `userProfile`, `connectionStatus`)\n- **Interfaces**: `PascalCase` with `I` prefix (e.g., `ITaskRepository`, `IAuthService`)\n- **Enums**: `PascalCase` (e.g., `TaskStatus`, `UserRole`, `QueueEventType`)\n\n## Import Patterns\n\n### Import Order\n1. **External dependencies**: Framework and third-party libraries\n2. **Internal packages**: Shared packages from workspace\n3. **Internal modules**: Same application modules (absolute imports)\n4. **Relative imports**: Local file imports\n5. **Type imports**: TypeScript type-only imports (using `import type`)\n\n### Module/Package Organization\n```typescript\n// 1. External dependencies\nimport { Module } from '@nestjs/common';\nimport { Socket } from 'socket.io';\n\n// 2. Internal packages\nimport { TaskSchema } from '@cc-task-manager/schemas';\nimport { ApiResponse } from '@cc-task-manager/types';\n\n// 3. Internal modules (absolute imports from src)\nimport { AuthService } from 'src/auth/auth.service';\nimport { TaskService } from 'src/tasks/task.service';\n\n// 4. Relative imports\nimport { TaskController } from './task.controller';\nimport { TaskRepository } from './task.repository';\n\n// 5. Type imports\nimport type { User } from 'src/users/user.entity';\nimport type { CreateTaskRequest } from './types';\n```\n\n## Code Structure Patterns\n\n### Module/Class Organization\n```typescript\n// 1. Imports/includes/dependencies\nimport { ... } from '...';\n\n// 2. Constants and configuration\nconst DEFAULT_TIMEOUT = 30000;\nconst RETRY_ATTEMPTS = 3;\n\n// 3. Type/interface definitions\ninterface TaskOptions {\n  timeout?: number;\n  retries?: number;\n}\n\n// 4. Main implementation\n@Injectable()\nexport class TaskService {\n  // Private properties first\n  private readonly logger = new Logger(TaskService.name);\n\n  // Constructor with dependency injection\n  constructor(\n    private readonly taskRepository: TaskRepository,\n    private readonly queueService: QueueService,\n  ) {}\n\n  // Public methods\n  async createTask(data: CreateTaskDto): Promise<Task> {\n    // Implementation\n  }\n\n  // Private methods\n  private validateTaskData(data: CreateTaskDto): void {\n    // Implementation\n  }\n}\n\n// 5. Helper/utility functions (if needed)\nfunction formatTaskId(id: string): string {\n  return `task_${id}`;\n}\n\n// 6. Exports/public API\nexport { TaskService };\nexport type { TaskOptions };\n```\n\n### Function/Method Organization\n```typescript\nasync createTask(data: CreateTaskDto): Promise<Task> {\n  // 1. Input validation first\n  this.validateTaskData(data);\n\n  // 2. Core logic in the middle\n  const task = await this.taskRepository.create({\n    ...data,\n    status: TaskStatus.PENDING,\n    createdAt: new Date(),\n  });\n\n  // 3. Side effects and notifications\n  await this.queueService.addJob('process-task', { taskId: task.id });\n  this.eventEmitter.emit('task.created', task);\n\n  // 4. Clear return point\n  return task;\n}\n```\n\n### File Organization Principles\n- **One primary export per file**: Each file should have one main class, function, or constant\n- **Related functionality grouped together**: Keep related utilities in the same file\n- **Public API at the top**: Main exports before private helpers\n- **Implementation details hidden**: Use private methods and internal modules\n\n## Code Organization Principles\n\n1. **Single Responsibility**: Each file and class should have one clear, well-defined purpose\n2. **Modularity**: Code should be organized into reusable, testable modules with clear interfaces\n3. **Testability**: Structure code to be easily unit tested with dependency injection and pure functions\n4. **Consistency**: Follow established patterns within the codebase for similar functionality\n5. **Separation of Concerns**: Keep business logic separate from infrastructure and presentation layers\n\n## Module Boundaries\n\n### Application Layer Boundaries\n- **Frontend ↔ Backend**: Communication only through REST API and WebSocket contracts\n- **Backend ↔ Worker**: Interaction only through BullMQ job queue and shared database\n- **Worker ↔ Claude Code**: Interaction through secure child_process.spawn and structured JSON\n\n### Code Layer Boundaries\n- **Controllers ↔ Services**: Controllers handle HTTP concerns, Services contain business logic\n- **Services ↔ Repositories**: Services coordinate business operations, Repositories handle data access\n- **Shared Packages**: Can be imported by any application but must remain framework-agnostic\n- **Feature Modules**: Each feature (tasks, users, auth) is self-contained with clear external interfaces\n\n### Dependency Direction Rules\n- **Top-down**: Presentation → Business → Data layers\n- **Inward**: Framework code depends on business logic, not vice versa\n- **Shared Packages**: No dependencies on application-specific code\n- **Cross-cutting**: Authentication, logging, and monitoring can be used across all layers\n\n## Code Size Guidelines\n\n### File Size Limits\n- **Component Files**: Maximum 200 lines (encourage composition over large components)\n- **Service Files**: Maximum 300 lines (split large services into smaller, focused services)\n- **Utility Files**: Maximum 150 lines (group related utilities, separate unrelated ones)\n- **Test Files**: No strict limit (comprehensive testing is priority)\n\n### Function/Method Size\n- **Functions**: Maximum 50 lines (break down complex logic into smaller functions)\n- **Methods**: Maximum 30 lines (use private methods for complex operations)\n- **React Components**: Maximum 100 lines (use composition and custom hooks)\n\n### Complexity Guidelines\n- **Nesting Depth**: Maximum 4 levels (use early returns and guard clauses)\n- **Cyclomatic Complexity**: Target <10 per function (break down complex conditional logic)\n- **Class Complexity**: Maximum 20 public methods (consider splitting large classes)\n\n## Dashboard/Monitoring Structure\n\n### Frontend Dashboard Organization\n```\napps/frontend/src/\n├── app/\n│   ├── dashboard/              # Dashboard pages\n│   │   ├── page.tsx           # Main dashboard\n│   │   ├── tasks/             # Task management pages\n│   │   └── monitoring/        # System monitoring pages\n│   └── api/                   # Next.js API routes\n├── components/\n│   ├── dashboard/             # Dashboard-specific components\n│   │   ├── TaskCard.tsx      # Individual task display\n│   │   ├── TaskList.tsx      # Task collection display\n│   │   ├── StatusIndicator.tsx # Real-time status display\n│   │   └── ProgressChart.tsx  # Progress visualization\n│   └── ui/                    # Shared UI components\n└── hooks/\n    └── useDashboard.ts        # Dashboard state management\n```\n\n### Real-time Communication Structure\n```\napps/backend/src/websocket/\n├── websocket.gateway.ts       # Main WebSocket gateway\n├── events/                    # Event type definitions\n├── handlers/                  # Event-specific handlers\n│   ├── task-events.handler.ts\n│   └── system-events.handler.ts\n└── middleware/               # WebSocket middleware\n    └── auth.middleware.ts    # Connection authentication\n```\n\n### Separation of Concerns\n- **Dashboard Frontend**: Isolated in dedicated routes and components, can be built independently\n- **Real-time Backend**: WebSocket gateway isolated from REST API, shares only data models\n- **Monitoring Data**: Separate from business logic, can be disabled without affecting core functionality\n- **Dashboard API**: Specific endpoints for dashboard needs, separate from main business API\n\n## Documentation Standards\n\n### Code Documentation Requirements\n- **All public APIs**: Must have TSDoc comments describing parameters, return values, and behavior\n- **Complex business logic**: Inline comments explaining the \"why\" behind non-obvious decisions\n- **Component props**: PropTypes or TypeScript interface documentation for all React components\n- **Database schemas**: Comments in Prisma schema explaining entity relationships and constraints\n\n### File Documentation Standards\n- **README files**: Required for each major module/package explaining purpose and usage\n- **API Documentation**: OpenAPI specification auto-generated from Zod schemas and NestJS decorators\n- **Architecture Decision Records**: Document significant architectural choices in dedicated ADR files\n- **Setup Documentation**: Clear instructions for local development, testing, and deployment",
  "fileStats": {
    "size": 14902,
    "lines": 321,
    "lastModified": "2025-09-25T13:16:47.292Z"
  },
  "comments": []
}